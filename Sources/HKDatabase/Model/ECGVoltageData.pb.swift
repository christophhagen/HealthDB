// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ECGVoltageData.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The ECG data contained in the `voltage_payload` column of the `ecg_samples` table
struct ECGVoltageData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Wrapper for the voltage measurements
  var inner: ECGVoltageData.Inner {
    get {return _inner ?? ECGVoltageData.Inner()}
    set {_inner = newValue}
  }
  /// Returns true if `inner` has been explicitly set.
  var hasInner: Bool {return self._inner != nil}
  /// Clears the value of `inner`. Subsequent reads from it will return its default value.
  mutating func clearInner() {self._inner = nil}

  /// The sampling frequency of the measurements
  var samplingFrequency: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Wrapper for the voltage measurements
  struct Inner {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Unknown property
    var something: Bool = false

    /// The voltage samples (microvolts)
    var samples: [Float] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _inner: ECGVoltageData.Inner? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension ECGVoltageData: @unchecked Sendable {}
extension ECGVoltageData.Inner: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ECGVoltageData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ECGVoltageData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inner"),
    2: .same(proto: "samplingFrequency"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._inner) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.samplingFrequency) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._inner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.samplingFrequency != 0 {
      try visitor.visitSingularDoubleField(value: self.samplingFrequency, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ECGVoltageData, rhs: ECGVoltageData) -> Bool {
    if lhs._inner != rhs._inner {return false}
    if lhs.samplingFrequency != rhs.samplingFrequency {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ECGVoltageData.Inner: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = ECGVoltageData.protoMessageName + ".Inner"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "something"),
    3: .same(proto: "samples"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.something) }()
      case 3: try { try decoder.decodeRepeatedFloatField(value: &self.samples) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.something != false {
      try visitor.visitSingularBoolField(value: self.something, fieldNumber: 1)
    }
    if !self.samples.isEmpty {
      try visitor.visitPackedFloatField(value: self.samples, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ECGVoltageData.Inner, rhs: ECGVoltageData.Inner) -> Bool {
    if lhs.something != rhs.something {return false}
    if lhs.samples != rhs.samples {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
